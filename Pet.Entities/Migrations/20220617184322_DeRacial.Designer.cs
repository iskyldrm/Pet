// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pet.Entities.Context;

#nullable disable

namespace Pet.Entities.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20220617184322_DeRacial")]
    partial class DeRacial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FavoriteUser", b =>
                {
                    b.Property<int>("FavoritesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoritesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("FavoriteUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FullAdsress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("AdvertNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdvertType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LivingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PetState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("LivingId");

                    b.HasIndex("UserId");

                    b.ToTable("Adverts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("CityNumber")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("AdvertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Genus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9837),
                            GenusName = "Amerikan Shorthair",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9847)
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9848),
                            GenusName = "American Curl",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9849)
                        },
                        new
                        {
                            Id = 3,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9850),
                            GenusName = "Balinese",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9850)
                        },
                        new
                        {
                            Id = 4,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9851),
                            GenusName = "California Spangled",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9852)
                        },
                        new
                        {
                            Id = 5,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9853),
                            GenusName = "Chartreux",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9853)
                        },
                        new
                        {
                            Id = 6,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9854),
                            GenusName = "Ragdoll Kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9854)
                        },
                        new
                        {
                            Id = 7,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9855),
                            GenusName = "Mavi Rus kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9855)
                        },
                        new
                        {
                            Id = 8,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9856),
                            GenusName = "Maine Coon",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9856)
                        },
                        new
                        {
                            Id = 9,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9857),
                            GenusName = "İran kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9858)
                        },
                        new
                        {
                            Id = 10,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9858),
                            GenusName = "British Shorthair",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9859)
                        },
                        new
                        {
                            Id = 11,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9859),
                            GenusName = "California Spangled",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9860)
                        },
                        new
                        {
                            Id = 12,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9860),
                            GenusName = "Munchkin",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9861)
                        },
                        new
                        {
                            Id = 13,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9862),
                            GenusName = "Scottish Fold",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9862)
                        },
                        new
                        {
                            Id = 14,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9863),
                            GenusName = "Norveç Orman Kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9863)
                        },
                        new
                        {
                            Id = 15,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9864),
                            GenusName = "Sibirya Kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9864)
                        },
                        new
                        {
                            Id = 16,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9865),
                            GenusName = "Savannah",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9865)
                        },
                        new
                        {
                            Id = 17,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9866),
                            GenusName = "Amerikan Kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9867)
                        },
                        new
                        {
                            Id = 18,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9867),
                            GenusName = "Exotic Shorthair",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9868)
                        },
                        new
                        {
                            Id = 19,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9868),
                            GenusName = "Ankara kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9869)
                        },
                        new
                        {
                            Id = 20,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9869),
                            GenusName = "Himalayan Kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9870)
                        },
                        new
                        {
                            Id = 21,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9871),
                            GenusName = "Kısa Tüylü Kedi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9871)
                        },
                        new
                        {
                            Id = 22,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9872),
                            GenusName = "Birman Kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9872)
                        },
                        new
                        {
                            Id = 23,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9873),
                            GenusName = "Habeş Kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9873)
                        },
                        new
                        {
                            Id = 24,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9874),
                            GenusName = "Bombay Kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9874)
                        },
                        new
                        {
                            Id = 25,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9876),
                            GenusName = "Kinkalow",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9876)
                        },
                        new
                        {
                            Id = 26,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9877),
                            GenusName = "Oriental Shorthair",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9877)
                        },
                        new
                        {
                            Id = 27,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9878),
                            GenusName = "Ragamuffin",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9878)
                        },
                        new
                        {
                            Id = 28,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9879),
                            GenusName = "Somali Kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9880)
                        },
                        new
                        {
                            Id = 29,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9880),
                            GenusName = "Singapura",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9881)
                        },
                        new
                        {
                            Id = 30,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9881),
                            GenusName = "British Longhair",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9882)
                        },
                        new
                        {
                            Id = 31,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9882),
                            GenusName = "Toyger",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9883)
                        },
                        new
                        {
                            Id = 32,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9884),
                            GenusName = "Van Kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9884)
                        },
                        new
                        {
                            Id = 33,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9885),
                            GenusName = "manks kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9885)
                        },
                        new
                        {
                            Id = 34,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9886),
                            GenusName = "Donskoy Kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9886)
                        },
                        new
                        {
                            Id = 35,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9887),
                            GenusName = "Havana kedisi",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9887)
                        },
                        new
                        {
                            Id = 36,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9888),
                            GenusName = "Ocicat",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9889)
                        },
                        new
                        {
                            Id = 37,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9889),
                            GenusName = "Balinese",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9890)
                        },
                        new
                        {
                            Id = 38,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9890),
                            GenusName = "Laperm",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9891)
                        },
                        new
                        {
                            Id = 39,
                            CreateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9892),
                            GenusName = "Selkirk Rex",
                            UpdateTime = new DateTime(2022, 6, 17, 21, 43, 21, 950, DateTimeKind.Local).AddTicks(9892)
                        });
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LivingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("LivingId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Kind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Familya")
                        .HasColumnType("int");

                    b.Property<int>("KindFamilya")
                        .HasColumnType("int");

                    b.Property<int>("KindTeam")
                        .HasColumnType("int");

                    b.Property<int>("Team")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Kinds");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenusId")
                        .HasColumnType("int");

                    b.Property<int>("KindId")
                        .HasColumnType("int");

                    b.Property<byte>("LivingAge")
                        .HasColumnType("tinyint");

                    b.Property<bool>("LivingGender")
                        .HasColumnType("bit");

                    b.Property<string>("LivingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GenusId");

                    b.HasIndex("KindId");

                    b.HasIndex("UserId");

                    b.ToTable("Livings");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Age")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Pet.Entities.Concrete.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            Id = "c2b6ca36-6fcf-4e60-85ed-7435339baf2e",
                            ConcurrencyStamp = "37b73f51-e5f2-4b3d-ac4e-ad3f989ccc38",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "d2e9ca94-5270-456d-b931-d4627f24dfb3",
                            ConcurrencyStamp = "8f05c7a3-4264-4569-bc96-bfed40ea0642",
                            Name = "BasicUser"
                        },
                        new
                        {
                            Id = "a150cd66-dfdc-48f3-a2b9-1da430e7b9e6",
                            ConcurrencyStamp = "fb80c04c-2593-469a-b1ce-8bbf27e89c6f",
                            Name = "MidUser"
                        },
                        new
                        {
                            Id = "dce5216f-d3a9-4f57-a0d9-a515a6618de6",
                            ConcurrencyStamp = "b82beaf8-a626-49ce-85b7-bebcb1b5857b",
                            Name = "HighUser"
                        },
                        new
                        {
                            Id = "e3a02c3e-a694-4032-a972-78e45713acc7",
                            ConcurrencyStamp = "70fe3092-e087-4e0b-b8f5-243294c520d5",
                            Name = "Creator"
                        },
                        new
                        {
                            Id = "ccf3da6c-cb2f-4c4b-b554-6b5a4b8451bb",
                            ConcurrencyStamp = "fb820977-6dd7-45bd-bae0-c75058f9dbd5",
                            Name = "Editor"
                        });
                });

            modelBuilder.Entity("FavoriteUser", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Favorite", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Address", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.Living", "Living")
                        .WithMany()
                        .HasForeignKey("LivingId");

                    b.HasOne("Pet.Entities.Concrete.User", "User")
                        .WithMany("Advert")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Living");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.District", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Favorite", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Advert", "Advert")
                        .WithMany("Favorites")
                        .HasForeignKey("AdvertId");

                    b.Navigation("Advert");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Image", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Advert", "Advert")
                        .WithMany("Image")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.Living", "Living")
                        .WithMany("Images")
                        .HasForeignKey("LivingId");

                    b.Navigation("Advert");

                    b.Navigation("Living");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Genus", "Genus")
                        .WithMany()
                        .HasForeignKey("GenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.Kind", "Kind")
                        .WithMany("Livings")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany("Livings")
                        .HasForeignKey("UserId");

                    b.Navigation("Genus");

                    b.Navigation("Kind");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Address", "Addresss")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addresss");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Kind", b =>
                {
                    b.Navigation("Livings");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.Navigation("Advert");

                    b.Navigation("Livings");
                });
#pragma warning restore 612, 618
        }
    }
}
