// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pet.Entities.Context;

#nullable disable

namespace Pet.Entities.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20220625193838_Livingaddpropaddedadvert")]
    partial class Livingaddpropaddedadvert
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FavoriteUser", b =>
                {
                    b.Property<int>("FavoritesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoritesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("FavoriteUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FullAdsress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("AdvertNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdvertType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LivingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PetState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("LivingId");

                    b.HasIndex("UserId");

                    b.ToTable("Adverts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("CityNumber")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("AdvertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Genus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GenusType")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(1981),
                            GenusName = "Amerikan Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(1993)
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(1995),
                            GenusName = "American Curl",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(1995)
                        },
                        new
                        {
                            Id = 3,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(1996),
                            GenusName = "Balinese",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(1997)
                        },
                        new
                        {
                            Id = 4,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(1998),
                            GenusName = "California Spangled",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(1998)
                        },
                        new
                        {
                            Id = 5,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(1999),
                            GenusName = "Chartreux",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2000)
                        },
                        new
                        {
                            Id = 6,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2000),
                            GenusName = "Ragdoll Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2001)
                        },
                        new
                        {
                            Id = 7,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2002),
                            GenusName = "Mavi Rus kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2002)
                        },
                        new
                        {
                            Id = 8,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2003),
                            GenusName = "Maine Coon",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2004)
                        },
                        new
                        {
                            Id = 9,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2004),
                            GenusName = "İran kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2005)
                        },
                        new
                        {
                            Id = 10,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2006),
                            GenusName = "British Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2006)
                        },
                        new
                        {
                            Id = 11,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2007),
                            GenusName = "California Spangled",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2007)
                        },
                        new
                        {
                            Id = 12,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2009),
                            GenusName = "Munchkin",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2009)
                        },
                        new
                        {
                            Id = 13,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2010),
                            GenusName = "Scottish Fold",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2010)
                        },
                        new
                        {
                            Id = 14,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2011),
                            GenusName = "Norveç Orman Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2012)
                        },
                        new
                        {
                            Id = 15,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2012),
                            GenusName = "Sibirya Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2013)
                        },
                        new
                        {
                            Id = 16,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2014),
                            GenusName = "Savannah",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2014)
                        },
                        new
                        {
                            Id = 17,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2015),
                            GenusName = "Amerikan Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2015)
                        },
                        new
                        {
                            Id = 18,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2016),
                            GenusName = "Exotic Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2016)
                        },
                        new
                        {
                            Id = 19,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2017),
                            GenusName = "Ankara kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2018)
                        },
                        new
                        {
                            Id = 20,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2019),
                            GenusName = "Himalayan Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2020)
                        },
                        new
                        {
                            Id = 21,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2021),
                            GenusName = "Kısa Tüylü Kedi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2021)
                        },
                        new
                        {
                            Id = 22,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2022),
                            GenusName = "Birman Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2022)
                        },
                        new
                        {
                            Id = 23,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2023),
                            GenusName = "Habeş Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2023)
                        },
                        new
                        {
                            Id = 24,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2024),
                            GenusName = "Bombay Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2025)
                        },
                        new
                        {
                            Id = 25,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2025),
                            GenusName = "Kinkalow",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2026)
                        },
                        new
                        {
                            Id = 26,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2026),
                            GenusName = "Oriental Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2027)
                        },
                        new
                        {
                            Id = 27,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2028),
                            GenusName = "Ragamuffin",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2029)
                        },
                        new
                        {
                            Id = 28,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2031),
                            GenusName = "Somali Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2031)
                        },
                        new
                        {
                            Id = 29,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2032),
                            GenusName = "Singapura",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2033)
                        },
                        new
                        {
                            Id = 30,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2033),
                            GenusName = "British Longhair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2034)
                        },
                        new
                        {
                            Id = 31,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2035),
                            GenusName = "Toyger",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2035)
                        },
                        new
                        {
                            Id = 32,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2036),
                            GenusName = "Van Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2036)
                        },
                        new
                        {
                            Id = 33,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2037),
                            GenusName = "manks kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2037)
                        },
                        new
                        {
                            Id = 34,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2038),
                            GenusName = "Donskoy Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2039)
                        },
                        new
                        {
                            Id = 35,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2039),
                            GenusName = "Havana kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2040)
                        },
                        new
                        {
                            Id = 36,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2041),
                            GenusName = "Ocicat",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2041)
                        },
                        new
                        {
                            Id = 37,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2042),
                            GenusName = "Balinese",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2042)
                        },
                        new
                        {
                            Id = 38,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2043),
                            GenusName = "Laperm",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2043)
                        },
                        new
                        {
                            Id = 39,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2044),
                            GenusName = "Selkirk Rex",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2045)
                        },
                        new
                        {
                            Id = 40,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2045),
                            GenusName = "Buldog",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2046)
                        },
                        new
                        {
                            Id = 41,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2047),
                            GenusName = "Labrador retriever",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2047)
                        },
                        new
                        {
                            Id = 42,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2048),
                            GenusName = "Alman çoban köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2048)
                        },
                        new
                        {
                            Id = 43,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2049),
                            GenusName = "Kaniş",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2049)
                        },
                        new
                        {
                            Id = 44,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2050),
                            GenusName = "Golden Retriever",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2051)
                        },
                        new
                        {
                            Id = 45,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2051),
                            GenusName = "Chihuahua",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2052)
                        },
                        new
                        {
                            Id = 46,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2052),
                            GenusName = "Fransız buldoğu",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2053)
                        },
                        new
                        {
                            Id = 47,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2087),
                            GenusName = "Bişon çuha köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2087)
                        },
                        new
                        {
                            Id = 48,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2088),
                            GenusName = "Boksör",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2089)
                        },
                        new
                        {
                            Id = 49,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2090),
                            GenusName = "Border collie",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2090)
                        },
                        new
                        {
                            Id = 50,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2091),
                            GenusName = "Sibirya kurdu",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2091)
                        },
                        new
                        {
                            Id = 51,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2092),
                            GenusName = "Pug",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2093)
                        },
                        new
                        {
                            Id = 52,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2093),
                            GenusName = "Amerikan Staffordshire teriyeri",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2094)
                        },
                        new
                        {
                            Id = 53,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2095),
                            GenusName = "Boston Terrier",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2095)
                        },
                        new
                        {
                            Id = 54,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2096),
                            GenusName = "Cavalier King Charles Spaniel",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2096)
                        },
                        new
                        {
                            Id = 55,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2097),
                            GenusName = "Pomeranian",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2097)
                        },
                        new
                        {
                            Id = 56,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2098),
                            GenusName = "Yorkshire teriyeri",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2099)
                        },
                        new
                        {
                            Id = 57,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2099),
                            GenusName = "Bull teriyer",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2100)
                        },
                        new
                        {
                            Id = 58,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2101),
                            GenusName = "İngiliz Cocker Spaniel",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2101)
                        },
                        new
                        {
                            Id = 59,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2102),
                            GenusName = "Amerikan Eskimo Köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2102)
                        },
                        new
                        {
                            Id = 60,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2103),
                            GenusName = "Danua",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2103)
                        },
                        new
                        {
                            Id = 61,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2104),
                            GenusName = "Malta köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2105)
                        },
                        new
                        {
                            Id = 62,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2105),
                            GenusName = "Çov-çov",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2106)
                        },
                        new
                        {
                            Id = 63,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2106),
                            GenusName = "Affenpinscher",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2107)
                        },
                        new
                        {
                            Id = 64,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2108),
                            GenusName = "Basenji",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2108)
                        },
                        new
                        {
                            Id = 65,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2109),
                            GenusName = "Dakhund",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2109)
                        },
                        new
                        {
                            Id = 66,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2110),
                            GenusName = "Bretonya epanyölü",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2111)
                        },
                        new
                        {
                            Id = 67,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2111),
                            GenusName = "Bulmastif",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2112)
                        });
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdvertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("LivingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("ImageUserId");

                    b.HasIndex("LivingId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Kind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Familya")
                        .HasColumnType("int");

                    b.Property<string>("KindName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Team")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Kinds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2536),
                            Familya = 0,
                            KindName = "Kedi",
                            Team = 0,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2536)
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2538),
                            Familya = 1,
                            KindName = "Köpek",
                            Team = 2,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 38, 38, 277, DateTimeKind.Local).AddTicks(2538)
                        });
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenusId")
                        .HasColumnType("int");

                    b.Property<int>("KindId")
                        .HasColumnType("int");

                    b.Property<byte>("LivingAge")
                        .HasColumnType("tinyint");

                    b.Property<bool>("LivingGender")
                        .HasColumnType("bit");

                    b.Property<string>("LivingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GenusId");

                    b.HasIndex("KindId");

                    b.HasIndex("UserId");

                    b.ToTable("Livings");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Age")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Pet.Entities.Concrete.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            Id = "d79ef067-01a6-475e-bf44-8549fd45b507",
                            ConcurrencyStamp = "b5d0c7a2-928a-40ff-ae27-8e0bfaa96b12",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "504900a4-ceeb-4ffc-85ad-248744ba87f4",
                            ConcurrencyStamp = "202c5d67-82dc-4e2e-b832-0f06936f65a4",
                            Name = "BasicUser"
                        },
                        new
                        {
                            Id = "d5c7020c-e9e3-4dc5-8ecc-0630c4eb1531",
                            ConcurrencyStamp = "b9a9fe3b-402d-49eb-9b8d-2d08a0860db5",
                            Name = "MidUser"
                        },
                        new
                        {
                            Id = "493c9b44-a9cc-49c4-8e22-dc7e25575bc4",
                            ConcurrencyStamp = "fe544a13-930f-414c-8829-32c734cba419",
                            Name = "HighUser"
                        },
                        new
                        {
                            Id = "75b65ff7-aea6-4119-9510-da76fad95587",
                            ConcurrencyStamp = "b3499e4b-1315-4653-9d65-dab0f67cd41f",
                            Name = "Creator"
                        },
                        new
                        {
                            Id = "4db7c735-8208-4a4e-8df0-c234f6667c5b",
                            ConcurrencyStamp = "fb38f5f1-88b8-479b-8207-7353d318bd78",
                            Name = "Editor"
                        });
                });

            modelBuilder.Entity("FavoriteUser", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Favorite", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Address", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.Living", "Living")
                        .WithMany("Advert")
                        .HasForeignKey("LivingId");

                    b.HasOne("Pet.Entities.Concrete.User", "User")
                        .WithMany("Advert")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Living");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.District", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Favorite", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Advert", "Advert")
                        .WithMany("Favorites")
                        .HasForeignKey("AdvertId");

                    b.Navigation("Advert");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Image", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Advert", "Advert")
                        .WithMany("Image")
                        .HasForeignKey("AdvertId");

                    b.HasOne("Pet.Entities.Concrete.User", "ImageUser")
                        .WithMany("Image")
                        .HasForeignKey("ImageUserId");

                    b.HasOne("Pet.Entities.Concrete.Living", "Living")
                        .WithMany("Images")
                        .HasForeignKey("LivingId");

                    b.Navigation("Advert");

                    b.Navigation("ImageUser");

                    b.Navigation("Living");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Genus", "Genus")
                        .WithMany()
                        .HasForeignKey("GenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.Kind", "Kind")
                        .WithMany("Livings")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", "User")
                        .WithMany("Livings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genus");

                    b.Navigation("Kind");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Address", "Addresss")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addresss");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Kind", b =>
                {
                    b.Navigation("Livings");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.Navigation("Advert");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.Navigation("Advert");

                    b.Navigation("Image");

                    b.Navigation("Livings");
                });
#pragma warning restore 612, 618
        }
    }
}
