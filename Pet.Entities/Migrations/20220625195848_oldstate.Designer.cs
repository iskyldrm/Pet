// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pet.Entities.Context;

#nullable disable

namespace Pet.Entities.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20220625195848_oldstate")]
    partial class oldstate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FavoriteUser", b =>
                {
                    b.Property<int>("FavoritesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoritesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("FavoriteUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FullAdsress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("AdvertNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdvertType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LivingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PetState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("LivingId");

                    b.HasIndex("UserId");

                    b.ToTable("Adverts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("CityNumber")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("AdvertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Genus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GenusType")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(257),
                            GenusName = "Amerikan Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(268)
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(269),
                            GenusName = "American Curl",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(270)
                        },
                        new
                        {
                            Id = 3,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(271),
                            GenusName = "Balinese",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(271)
                        },
                        new
                        {
                            Id = 4,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(272),
                            GenusName = "California Spangled",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(273)
                        },
                        new
                        {
                            Id = 5,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(274),
                            GenusName = "Chartreux",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(274)
                        },
                        new
                        {
                            Id = 6,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(275),
                            GenusName = "Ragdoll Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(276)
                        },
                        new
                        {
                            Id = 7,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(276),
                            GenusName = "Mavi Rus kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(277)
                        },
                        new
                        {
                            Id = 8,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(277),
                            GenusName = "Maine Coon",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(278)
                        },
                        new
                        {
                            Id = 9,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(280),
                            GenusName = "İran kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(281)
                        },
                        new
                        {
                            Id = 10,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(282),
                            GenusName = "British Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(282)
                        },
                        new
                        {
                            Id = 11,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(283),
                            GenusName = "California Spangled",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(283)
                        },
                        new
                        {
                            Id = 12,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(284),
                            GenusName = "Munchkin",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(284)
                        },
                        new
                        {
                            Id = 13,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(285),
                            GenusName = "Scottish Fold",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(286)
                        },
                        new
                        {
                            Id = 14,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(287),
                            GenusName = "Norveç Orman Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(287)
                        },
                        new
                        {
                            Id = 15,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(288),
                            GenusName = "Sibirya Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(289)
                        },
                        new
                        {
                            Id = 16,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(289),
                            GenusName = "Savannah",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(290)
                        },
                        new
                        {
                            Id = 17,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(291),
                            GenusName = "Amerikan Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(291)
                        },
                        new
                        {
                            Id = 18,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(292),
                            GenusName = "Exotic Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(292)
                        },
                        new
                        {
                            Id = 19,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(293),
                            GenusName = "Ankara kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(294)
                        },
                        new
                        {
                            Id = 20,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(294),
                            GenusName = "Himalayan Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(295)
                        },
                        new
                        {
                            Id = 21,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(296),
                            GenusName = "Kısa Tüylü Kedi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(296)
                        },
                        new
                        {
                            Id = 22,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(297),
                            GenusName = "Birman Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(297)
                        },
                        new
                        {
                            Id = 23,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(298),
                            GenusName = "Habeş Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(298)
                        },
                        new
                        {
                            Id = 24,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(299),
                            GenusName = "Bombay Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(300)
                        },
                        new
                        {
                            Id = 25,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(300),
                            GenusName = "Kinkalow",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(301)
                        },
                        new
                        {
                            Id = 26,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(302),
                            GenusName = "Oriental Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(302)
                        },
                        new
                        {
                            Id = 27,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(303),
                            GenusName = "Ragamuffin",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(303)
                        },
                        new
                        {
                            Id = 28,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(304),
                            GenusName = "Somali Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(305)
                        },
                        new
                        {
                            Id = 29,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(305),
                            GenusName = "Singapura",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(306)
                        },
                        new
                        {
                            Id = 30,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(310),
                            GenusName = "British Longhair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(310)
                        },
                        new
                        {
                            Id = 31,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(311),
                            GenusName = "Toyger",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(312)
                        },
                        new
                        {
                            Id = 32,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(312),
                            GenusName = "Van Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(313)
                        },
                        new
                        {
                            Id = 33,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(320),
                            GenusName = "manks kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(320)
                        },
                        new
                        {
                            Id = 34,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(321),
                            GenusName = "Donskoy Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(322)
                        },
                        new
                        {
                            Id = 35,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(322),
                            GenusName = "Havana kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(323)
                        },
                        new
                        {
                            Id = 36,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(324),
                            GenusName = "Ocicat",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(324)
                        },
                        new
                        {
                            Id = 37,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(325),
                            GenusName = "Balinese",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(325)
                        },
                        new
                        {
                            Id = 38,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(326),
                            GenusName = "Laperm",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(326)
                        },
                        new
                        {
                            Id = 39,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(327),
                            GenusName = "Selkirk Rex",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(328)
                        },
                        new
                        {
                            Id = 40,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(328),
                            GenusName = "Buldog",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(329)
                        },
                        new
                        {
                            Id = 41,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(330),
                            GenusName = "Labrador retriever",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(330)
                        },
                        new
                        {
                            Id = 42,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(331),
                            GenusName = "Alman çoban köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(331)
                        },
                        new
                        {
                            Id = 43,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(332),
                            GenusName = "Kaniş",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(333)
                        },
                        new
                        {
                            Id = 44,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(333),
                            GenusName = "Golden Retriever",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(334)
                        },
                        new
                        {
                            Id = 45,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(335),
                            GenusName = "Chihuahua",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(335)
                        },
                        new
                        {
                            Id = 46,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(336),
                            GenusName = "Fransız buldoğu",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(340)
                        },
                        new
                        {
                            Id = 47,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(341),
                            GenusName = "Bişon çuha köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(341)
                        },
                        new
                        {
                            Id = 48,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(342),
                            GenusName = "Boksör",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(343)
                        },
                        new
                        {
                            Id = 49,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(343),
                            GenusName = "Border collie",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(344)
                        },
                        new
                        {
                            Id = 50,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(344),
                            GenusName = "Sibirya kurdu",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(345)
                        },
                        new
                        {
                            Id = 51,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(346),
                            GenusName = "Pug",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(346)
                        },
                        new
                        {
                            Id = 52,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(347),
                            GenusName = "Amerikan Staffordshire teriyeri",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(347)
                        },
                        new
                        {
                            Id = 53,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(348),
                            GenusName = "Boston Terrier",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(349)
                        },
                        new
                        {
                            Id = 54,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(349),
                            GenusName = "Cavalier King Charles Spaniel",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(350)
                        },
                        new
                        {
                            Id = 55,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(452),
                            GenusName = "Pomeranian",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(453)
                        },
                        new
                        {
                            Id = 56,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(454),
                            GenusName = "Yorkshire teriyeri",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(454)
                        },
                        new
                        {
                            Id = 57,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(455),
                            GenusName = "Bull teriyer",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(456)
                        },
                        new
                        {
                            Id = 58,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(457),
                            GenusName = "İngiliz Cocker Spaniel",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(457)
                        },
                        new
                        {
                            Id = 59,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(458),
                            GenusName = "Amerikan Eskimo Köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(458)
                        },
                        new
                        {
                            Id = 60,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(459),
                            GenusName = "Danua",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(460)
                        },
                        new
                        {
                            Id = 61,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(460),
                            GenusName = "Malta köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(461)
                        },
                        new
                        {
                            Id = 62,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(461),
                            GenusName = "Çov-çov",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(462)
                        },
                        new
                        {
                            Id = 63,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(463),
                            GenusName = "Affenpinscher",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(463)
                        },
                        new
                        {
                            Id = 64,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(464),
                            GenusName = "Basenji",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(464)
                        },
                        new
                        {
                            Id = 65,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(465),
                            GenusName = "Dakhund",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(466)
                        },
                        new
                        {
                            Id = 66,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(466),
                            GenusName = "Bretonya epanyölü",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(467)
                        },
                        new
                        {
                            Id = 67,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(467),
                            GenusName = "Bulmastif",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(468)
                        });
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdvertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("LivingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("ImageUserId");

                    b.HasIndex("LivingId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Kind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Familya")
                        .HasColumnType("int");

                    b.Property<string>("KindName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Team")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Kinds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(744),
                            Familya = 0,
                            KindName = "Kedi",
                            Team = 0,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(745)
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(746),
                            Familya = 1,
                            KindName = "Köpek",
                            Team = 2,
                            UpdateTime = new DateTime(2022, 6, 25, 22, 58, 47, 743, DateTimeKind.Local).AddTicks(747)
                        });
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenusId")
                        .HasColumnType("int");

                    b.Property<int>("KindId")
                        .HasColumnType("int");

                    b.Property<byte>("LivingAge")
                        .HasColumnType("tinyint");

                    b.Property<bool>("LivingGender")
                        .HasColumnType("bit");

                    b.Property<string>("LivingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GenusId");

                    b.HasIndex("KindId");

                    b.HasIndex("UserId");

                    b.ToTable("Livings");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Age")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Pet.Entities.Concrete.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            Id = "61d97b38-2baa-4c27-9638-14fa9006022d",
                            ConcurrencyStamp = "8873bcfa-170c-4897-8add-9c425ee21e32",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "e7610f19-d477-433f-9d17-3f751130f3ee",
                            ConcurrencyStamp = "5a29a9ab-373e-4e08-9f82-e18559428b2c",
                            Name = "BasicUser"
                        },
                        new
                        {
                            Id = "4479cf9b-7a24-4400-84ab-150d6c3db8d9",
                            ConcurrencyStamp = "1d25afec-3533-439d-9fc4-0f17e04df331",
                            Name = "MidUser"
                        },
                        new
                        {
                            Id = "1ba68496-b4a9-438f-839d-4bdeb3b82b2b",
                            ConcurrencyStamp = "b6c7ae37-ec1a-4b45-b593-723a3bca0bbe",
                            Name = "HighUser"
                        },
                        new
                        {
                            Id = "c40318e9-a524-479d-b599-8d54aa0eace6",
                            ConcurrencyStamp = "9f146792-be55-4ed1-8ad2-64bb6bea0818",
                            Name = "Creator"
                        },
                        new
                        {
                            Id = "2b9da517-5fd0-4428-9d16-f2b173ee932f",
                            ConcurrencyStamp = "786e19f0-7fad-4d0e-b357-a37f4bc34fbd",
                            Name = "Editor"
                        });
                });

            modelBuilder.Entity("FavoriteUser", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Favorite", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Address", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.Living", "Living")
                        .WithMany()
                        .HasForeignKey("LivingId");

                    b.HasOne("Pet.Entities.Concrete.User", "User")
                        .WithMany("Advert")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Living");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.District", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Favorite", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Advert", "Advert")
                        .WithMany("Favorites")
                        .HasForeignKey("AdvertId");

                    b.Navigation("Advert");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Image", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Advert", "Advert")
                        .WithMany("Image")
                        .HasForeignKey("AdvertId");

                    b.HasOne("Pet.Entities.Concrete.User", "ImageUser")
                        .WithMany("Image")
                        .HasForeignKey("ImageUserId");

                    b.HasOne("Pet.Entities.Concrete.Living", "Living")
                        .WithMany("Images")
                        .HasForeignKey("LivingId");

                    b.Navigation("Advert");

                    b.Navigation("ImageUser");

                    b.Navigation("Living");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Genus", "Genus")
                        .WithMany()
                        .HasForeignKey("GenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.Kind", "Kind")
                        .WithMany("Livings")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", "User")
                        .WithMany("Livings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genus");

                    b.Navigation("Kind");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Address", "Addresss")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addresss");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Kind", b =>
                {
                    b.Navigation("Livings");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.Navigation("Advert");

                    b.Navigation("Image");

                    b.Navigation("Livings");
                });
#pragma warning restore 612, 618
        }
    }
}
