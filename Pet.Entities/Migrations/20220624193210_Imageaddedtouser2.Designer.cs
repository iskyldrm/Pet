// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pet.Entities.Context;

#nullable disable

namespace Pet.Entities.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20220624193210_Imageaddedtouser2")]
    partial class Imageaddedtouser2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FavoriteUser", b =>
                {
                    b.Property<int>("FavoritesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoritesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("FavoriteUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FullAdsress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("AdvertNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdvertType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LivingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PetState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("LivingId");

                    b.HasIndex("UserId");

                    b.ToTable("Adverts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("CityNumber")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("AdvertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Genus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GenusType")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4616),
                            GenusName = "Amerikan Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4627)
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4628),
                            GenusName = "American Curl",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4628)
                        },
                        new
                        {
                            Id = 3,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4629),
                            GenusName = "Balinese",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4630)
                        },
                        new
                        {
                            Id = 4,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4631),
                            GenusName = "California Spangled",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4632)
                        },
                        new
                        {
                            Id = 5,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4632),
                            GenusName = "Chartreux",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4633)
                        },
                        new
                        {
                            Id = 6,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4634),
                            GenusName = "Ragdoll Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4634)
                        },
                        new
                        {
                            Id = 7,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4635),
                            GenusName = "Mavi Rus kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4635)
                        },
                        new
                        {
                            Id = 8,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4636),
                            GenusName = "Maine Coon",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4637)
                        },
                        new
                        {
                            Id = 9,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4637),
                            GenusName = "İran kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4638)
                        },
                        new
                        {
                            Id = 10,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4638),
                            GenusName = "British Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4639)
                        },
                        new
                        {
                            Id = 11,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4640),
                            GenusName = "California Spangled",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4640)
                        },
                        new
                        {
                            Id = 12,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4641),
                            GenusName = "Munchkin",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4641)
                        },
                        new
                        {
                            Id = 13,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4642),
                            GenusName = "Scottish Fold",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4643)
                        },
                        new
                        {
                            Id = 14,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4643),
                            GenusName = "Norveç Orman Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4644)
                        },
                        new
                        {
                            Id = 15,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4644),
                            GenusName = "Sibirya Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4645)
                        },
                        new
                        {
                            Id = 16,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4646),
                            GenusName = "Savannah",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4646)
                        },
                        new
                        {
                            Id = 17,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4648),
                            GenusName = "Amerikan Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4648)
                        },
                        new
                        {
                            Id = 18,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4649),
                            GenusName = "Exotic Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4649)
                        },
                        new
                        {
                            Id = 19,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4650),
                            GenusName = "Ankara kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4650)
                        },
                        new
                        {
                            Id = 20,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4651),
                            GenusName = "Himalayan Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4652)
                        },
                        new
                        {
                            Id = 21,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4652),
                            GenusName = "Kısa Tüylü Kedi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4653)
                        },
                        new
                        {
                            Id = 22,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4653),
                            GenusName = "Birman Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4654)
                        },
                        new
                        {
                            Id = 23,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4655),
                            GenusName = "Habeş Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4655)
                        },
                        new
                        {
                            Id = 24,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4656),
                            GenusName = "Bombay Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4656)
                        },
                        new
                        {
                            Id = 25,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4657),
                            GenusName = "Kinkalow",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4657)
                        },
                        new
                        {
                            Id = 26,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4658),
                            GenusName = "Oriental Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4659)
                        },
                        new
                        {
                            Id = 27,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4659),
                            GenusName = "Ragamuffin",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4660)
                        },
                        new
                        {
                            Id = 28,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4661),
                            GenusName = "Somali Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4661)
                        },
                        new
                        {
                            Id = 29,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4662),
                            GenusName = "Singapura",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4662)
                        },
                        new
                        {
                            Id = 30,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4663),
                            GenusName = "British Longhair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4663)
                        },
                        new
                        {
                            Id = 31,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4664),
                            GenusName = "Toyger",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4665)
                        },
                        new
                        {
                            Id = 32,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4665),
                            GenusName = "Van Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4666)
                        },
                        new
                        {
                            Id = 33,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4668),
                            GenusName = "manks kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4668)
                        },
                        new
                        {
                            Id = 34,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4669),
                            GenusName = "Donskoy Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4669)
                        },
                        new
                        {
                            Id = 35,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4670),
                            GenusName = "Havana kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4671)
                        },
                        new
                        {
                            Id = 36,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4671),
                            GenusName = "Ocicat",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4672)
                        },
                        new
                        {
                            Id = 37,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4673),
                            GenusName = "Balinese",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4673)
                        },
                        new
                        {
                            Id = 38,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4674),
                            GenusName = "Laperm",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4674)
                        },
                        new
                        {
                            Id = 39,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4675),
                            GenusName = "Selkirk Rex",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4675)
                        },
                        new
                        {
                            Id = 40,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4677),
                            GenusName = "Buldog",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4677)
                        },
                        new
                        {
                            Id = 41,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4678),
                            GenusName = "Labrador retriever",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4678)
                        },
                        new
                        {
                            Id = 42,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4679),
                            GenusName = "Alman çoban köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4679)
                        },
                        new
                        {
                            Id = 43,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4680),
                            GenusName = "Kaniş",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4681)
                        },
                        new
                        {
                            Id = 44,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4681),
                            GenusName = "Golden Retriever",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4682)
                        },
                        new
                        {
                            Id = 45,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4682),
                            GenusName = "Chihuahua",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4683)
                        },
                        new
                        {
                            Id = 46,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4684),
                            GenusName = "Fransız buldoğu",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4684)
                        },
                        new
                        {
                            Id = 47,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4685),
                            GenusName = "Bişon çuha köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4685)
                        },
                        new
                        {
                            Id = 48,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4686),
                            GenusName = "Boksör",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4686)
                        },
                        new
                        {
                            Id = 49,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4687),
                            GenusName = "Border collie",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4688)
                        },
                        new
                        {
                            Id = 50,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4688),
                            GenusName = "Sibirya kurdu",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4689)
                        },
                        new
                        {
                            Id = 51,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4690),
                            GenusName = "Pug",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4690)
                        },
                        new
                        {
                            Id = 52,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4691),
                            GenusName = "Amerikan Staffordshire teriyeri",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4691)
                        },
                        new
                        {
                            Id = 53,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4692),
                            GenusName = "Boston Terrier",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4692)
                        },
                        new
                        {
                            Id = 54,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4693),
                            GenusName = "Cavalier King Charles Spaniel",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4694)
                        },
                        new
                        {
                            Id = 55,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4694),
                            GenusName = "Pomeranian",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4695)
                        },
                        new
                        {
                            Id = 56,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4695),
                            GenusName = "Yorkshire teriyeri",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4696)
                        },
                        new
                        {
                            Id = 57,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4697),
                            GenusName = "Bull teriyer",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4697)
                        },
                        new
                        {
                            Id = 58,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4698),
                            GenusName = "İngiliz Cocker Spaniel",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4698)
                        },
                        new
                        {
                            Id = 59,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4699),
                            GenusName = "Amerikan Eskimo Köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4699)
                        },
                        new
                        {
                            Id = 60,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4700),
                            GenusName = "Danua",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4701)
                        },
                        new
                        {
                            Id = 61,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4701),
                            GenusName = "Malta köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4702)
                        },
                        new
                        {
                            Id = 62,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4703),
                            GenusName = "Çov-çov",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4703)
                        },
                        new
                        {
                            Id = 63,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4704),
                            GenusName = "Affenpinscher",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4704)
                        },
                        new
                        {
                            Id = 64,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4705),
                            GenusName = "Basenji",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4705)
                        },
                        new
                        {
                            Id = 65,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4706),
                            GenusName = "Dakhund",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4707)
                        },
                        new
                        {
                            Id = 66,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4707),
                            GenusName = "Bretonya epanyölü",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4708)
                        },
                        new
                        {
                            Id = 67,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4708),
                            GenusName = "Bulmastif",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4709)
                        });
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdvertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("LivingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("ImageUserId");

                    b.HasIndex("LivingId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Kind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Familya")
                        .HasColumnType("int");

                    b.Property<string>("KindName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Team")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Kinds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4923),
                            Familya = 0,
                            KindName = "Kedi",
                            Team = 0,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4923)
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4925),
                            Familya = 1,
                            KindName = "Köpek",
                            Team = 2,
                            UpdateTime = new DateTime(2022, 6, 24, 22, 32, 10, 83, DateTimeKind.Local).AddTicks(4925)
                        });
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenusId")
                        .HasColumnType("int");

                    b.Property<int>("KindId")
                        .HasColumnType("int");

                    b.Property<byte>("LivingAge")
                        .HasColumnType("tinyint");

                    b.Property<bool>("LivingGender")
                        .HasColumnType("bit");

                    b.Property<string>("LivingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GenusId");

                    b.HasIndex("KindId");

                    b.HasIndex("UserId");

                    b.ToTable("Livings");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Age")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Pet.Entities.Concrete.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            Id = "6cecf585-debc-4b83-8683-4ec21b565620",
                            ConcurrencyStamp = "718b5fa2-4b92-499d-ad80-856e477581d1",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "f2fb74ad-af25-4b4f-8fe8-3f7248b1795e",
                            ConcurrencyStamp = "87a69d0d-fd34-4761-b868-9171456be7f0",
                            Name = "BasicUser"
                        },
                        new
                        {
                            Id = "161b57c7-e73e-4609-b3fc-739293d6a610",
                            ConcurrencyStamp = "6fd1248f-6781-4cf8-9d38-eeafc87303f6",
                            Name = "MidUser"
                        },
                        new
                        {
                            Id = "3b8dee41-2c31-4b4d-8a1c-c05b0db43eff",
                            ConcurrencyStamp = "f777212c-126a-4f51-adf9-c4ff69784b0f",
                            Name = "HighUser"
                        },
                        new
                        {
                            Id = "8f1965d2-8554-4526-8d1b-fc9909a6075f",
                            ConcurrencyStamp = "bc253cda-eb57-4165-9374-e2d572791328",
                            Name = "Creator"
                        },
                        new
                        {
                            Id = "43207243-d118-4786-a835-382ab781d0d0",
                            ConcurrencyStamp = "29fe5b12-2bf0-42cd-9ba8-49699f7568c0",
                            Name = "Editor"
                        });
                });

            modelBuilder.Entity("FavoriteUser", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Favorite", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Address", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.Living", "Living")
                        .WithMany()
                        .HasForeignKey("LivingId");

                    b.HasOne("Pet.Entities.Concrete.User", "User")
                        .WithMany("Advert")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Living");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.District", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Favorite", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Advert", "Advert")
                        .WithMany("Favorites")
                        .HasForeignKey("AdvertId");

                    b.Navigation("Advert");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Image", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Advert", "Advert")
                        .WithMany("Image")
                        .HasForeignKey("AdvertId");

                    b.HasOne("Pet.Entities.Concrete.User", "ImageUser")
                        .WithMany("Image")
                        .HasForeignKey("ImageUserId");

                    b.HasOne("Pet.Entities.Concrete.Living", "Living")
                        .WithMany("Images")
                        .HasForeignKey("LivingId");

                    b.Navigation("Advert");

                    b.Navigation("ImageUser");

                    b.Navigation("Living");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Genus", "Genus")
                        .WithMany()
                        .HasForeignKey("GenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.Kind", "Kind")
                        .WithMany("Livings")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", "User")
                        .WithMany("Livings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genus");

                    b.Navigation("Kind");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Address", "Addresss")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addresss");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Kind", b =>
                {
                    b.Navigation("Livings");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.Navigation("Advert");

                    b.Navigation("Image");

                    b.Navigation("Livings");
                });
#pragma warning restore 612, 618
        }
    }
}
