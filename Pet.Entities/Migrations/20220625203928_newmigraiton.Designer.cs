// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pet.Entities.Context;

#nullable disable

namespace Pet.Entities.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20220625203928_newmigraiton")]
    partial class newmigraiton
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FavoriteUser", b =>
                {
                    b.Property<int>("FavoritesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoritesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("FavoriteUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FullAdsress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("AdvertNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdvertType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LivingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PetState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("LivingId");

                    b.HasIndex("UserId");

                    b.ToTable("Adverts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("CityNumber")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("AdvertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Genus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GenusType")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(8987),
                            GenusName = "Amerikan Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9002)
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9004),
                            GenusName = "American Curl",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9004)
                        },
                        new
                        {
                            Id = 3,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9006),
                            GenusName = "Balinese",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9006)
                        },
                        new
                        {
                            Id = 4,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9007),
                            GenusName = "California Spangled",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9008)
                        },
                        new
                        {
                            Id = 5,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9009),
                            GenusName = "Chartreux",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9010)
                        },
                        new
                        {
                            Id = 6,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9014),
                            GenusName = "Ragdoll Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9014)
                        },
                        new
                        {
                            Id = 7,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9015),
                            GenusName = "Mavi Rus kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9016)
                        },
                        new
                        {
                            Id = 8,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9017),
                            GenusName = "Maine Coon",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9018)
                        },
                        new
                        {
                            Id = 9,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9019),
                            GenusName = "İran kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9019)
                        },
                        new
                        {
                            Id = 10,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9021),
                            GenusName = "British Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9021)
                        },
                        new
                        {
                            Id = 11,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9022),
                            GenusName = "California Spangled",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9023)
                        },
                        new
                        {
                            Id = 12,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9024),
                            GenusName = "Munchkin",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9025)
                        },
                        new
                        {
                            Id = 13,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9026),
                            GenusName = "Scottish Fold",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9026)
                        },
                        new
                        {
                            Id = 14,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9027),
                            GenusName = "Norveç Orman Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9028)
                        },
                        new
                        {
                            Id = 15,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9029),
                            GenusName = "Sibirya Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9030)
                        },
                        new
                        {
                            Id = 16,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9031),
                            GenusName = "Savannah",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9031)
                        },
                        new
                        {
                            Id = 17,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9033),
                            GenusName = "Amerikan Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9033)
                        },
                        new
                        {
                            Id = 18,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9034),
                            GenusName = "Exotic Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9035)
                        },
                        new
                        {
                            Id = 19,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9036),
                            GenusName = "Ankara kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9036)
                        },
                        new
                        {
                            Id = 20,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9037),
                            GenusName = "Himalayan Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9038)
                        },
                        new
                        {
                            Id = 21,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9039),
                            GenusName = "Kısa Tüylü Kedi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9040)
                        },
                        new
                        {
                            Id = 22,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9041),
                            GenusName = "Birman Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9041)
                        },
                        new
                        {
                            Id = 23,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9094),
                            GenusName = "Habeş Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9095)
                        },
                        new
                        {
                            Id = 24,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9096),
                            GenusName = "Bombay Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9097)
                        },
                        new
                        {
                            Id = 25,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9098),
                            GenusName = "Kinkalow",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9099)
                        },
                        new
                        {
                            Id = 26,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9100),
                            GenusName = "Oriental Shorthair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9101)
                        },
                        new
                        {
                            Id = 27,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9102),
                            GenusName = "Ragamuffin",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9102)
                        },
                        new
                        {
                            Id = 28,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9103),
                            GenusName = "Somali Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9104)
                        },
                        new
                        {
                            Id = 29,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9105),
                            GenusName = "Singapura",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9106)
                        },
                        new
                        {
                            Id = 30,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9107),
                            GenusName = "British Longhair",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9107)
                        },
                        new
                        {
                            Id = 31,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9108),
                            GenusName = "Toyger",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9109)
                        },
                        new
                        {
                            Id = 32,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9110),
                            GenusName = "Van Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9111)
                        },
                        new
                        {
                            Id = 33,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9112),
                            GenusName = "manks kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9113)
                        },
                        new
                        {
                            Id = 34,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9114),
                            GenusName = "Donskoy Kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9114)
                        },
                        new
                        {
                            Id = 35,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9115),
                            GenusName = "Havana kedisi",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9116)
                        },
                        new
                        {
                            Id = 36,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9117),
                            GenusName = "Ocicat",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9118)
                        },
                        new
                        {
                            Id = 37,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9119),
                            GenusName = "Balinese",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9119)
                        },
                        new
                        {
                            Id = 38,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9120),
                            GenusName = "Laperm",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9121)
                        },
                        new
                        {
                            Id = 39,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9122),
                            GenusName = "Selkirk Rex",
                            GenusType = true,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9123)
                        },
                        new
                        {
                            Id = 40,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9124),
                            GenusName = "Buldog",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9124)
                        },
                        new
                        {
                            Id = 41,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9125),
                            GenusName = "Labrador retriever",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9126)
                        },
                        new
                        {
                            Id = 42,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9127),
                            GenusName = "Alman çoban köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9128)
                        },
                        new
                        {
                            Id = 43,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9129),
                            GenusName = "Kaniş",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9130)
                        },
                        new
                        {
                            Id = 44,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9131),
                            GenusName = "Golden Retriever",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9131)
                        },
                        new
                        {
                            Id = 45,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9132),
                            GenusName = "Chihuahua",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9133)
                        },
                        new
                        {
                            Id = 46,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9134),
                            GenusName = "Fransız buldoğu",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9135)
                        },
                        new
                        {
                            Id = 47,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9136),
                            GenusName = "Bişon çuha köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9136)
                        },
                        new
                        {
                            Id = 48,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9137),
                            GenusName = "Boksör",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9138)
                        },
                        new
                        {
                            Id = 49,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9139),
                            GenusName = "Border collie",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9140)
                        },
                        new
                        {
                            Id = 50,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9141),
                            GenusName = "Sibirya kurdu",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9142)
                        },
                        new
                        {
                            Id = 51,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9143),
                            GenusName = "Pug",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9143)
                        },
                        new
                        {
                            Id = 52,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9144),
                            GenusName = "Amerikan Staffordshire teriyeri",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9145)
                        },
                        new
                        {
                            Id = 53,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9146),
                            GenusName = "Boston Terrier",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9147)
                        },
                        new
                        {
                            Id = 54,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9148),
                            GenusName = "Cavalier King Charles Spaniel",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9149)
                        },
                        new
                        {
                            Id = 55,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9150),
                            GenusName = "Pomeranian",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9150)
                        },
                        new
                        {
                            Id = 56,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9151),
                            GenusName = "Yorkshire teriyeri",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9152)
                        },
                        new
                        {
                            Id = 57,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9153),
                            GenusName = "Bull teriyer",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9154)
                        },
                        new
                        {
                            Id = 58,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9155),
                            GenusName = "İngiliz Cocker Spaniel",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9156)
                        },
                        new
                        {
                            Id = 59,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9157),
                            GenusName = "Amerikan Eskimo Köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9158)
                        },
                        new
                        {
                            Id = 60,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9159),
                            GenusName = "Danua",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9160)
                        },
                        new
                        {
                            Id = 61,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9161),
                            GenusName = "Malta köpeği",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9161)
                        },
                        new
                        {
                            Id = 62,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9162),
                            GenusName = "Çov-çov",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9163)
                        },
                        new
                        {
                            Id = 63,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9164),
                            GenusName = "Affenpinscher",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9165)
                        },
                        new
                        {
                            Id = 64,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9166),
                            GenusName = "Basenji",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9167)
                        },
                        new
                        {
                            Id = 65,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9168),
                            GenusName = "Dakhund",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9168)
                        },
                        new
                        {
                            Id = 66,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9169),
                            GenusName = "Bretonya epanyölü",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9170)
                        },
                        new
                        {
                            Id = 67,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9171),
                            GenusName = "Bulmastif",
                            GenusType = false,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9172)
                        });
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdvertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("LivingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("ImageUserId");

                    b.HasIndex("LivingId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Kind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Familya")
                        .HasColumnType("int");

                    b.Property<string>("KindName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Team")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Kinds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9467),
                            Familya = 0,
                            KindName = "Kedi",
                            Team = 0,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9469)
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9470),
                            Familya = 1,
                            KindName = "Köpek",
                            Team = 2,
                            UpdateTime = new DateTime(2022, 6, 25, 23, 39, 28, 64, DateTimeKind.Local).AddTicks(9471)
                        });
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenusId")
                        .HasColumnType("int");

                    b.Property<int>("KindId")
                        .HasColumnType("int");

                    b.Property<byte>("LivingAge")
                        .HasColumnType("tinyint");

                    b.Property<bool>("LivingGender")
                        .HasColumnType("bit");

                    b.Property<string>("LivingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GenusId");

                    b.HasIndex("KindId");

                    b.HasIndex("UserId");

                    b.ToTable("Livings");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Age")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Pet.Entities.Concrete.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            Id = "672e30f7-fab4-4f34-8015-014921e05ed8",
                            ConcurrencyStamp = "a6193ea9-bdac-4b38-9526-8ca3b9ba07bf",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "75b56726-8dcd-4a29-8041-59656057b4b4",
                            ConcurrencyStamp = "30d8de55-604c-48d1-ad61-0784488c350c",
                            Name = "BasicUser"
                        },
                        new
                        {
                            Id = "4e885d36-ff22-4f78-8721-12f94c935956",
                            ConcurrencyStamp = "520dce82-3683-486e-8888-c1effd99d0a0",
                            Name = "MidUser"
                        },
                        new
                        {
                            Id = "5509bc30-74c6-4240-95e3-263ac6abdaf1",
                            ConcurrencyStamp = "e0c190b0-4f72-49c6-9ae0-e6308bb4c5e3",
                            Name = "HighUser"
                        },
                        new
                        {
                            Id = "8bfc911d-b7ad-4622-b265-7c59111775ee",
                            ConcurrencyStamp = "e383ffdc-ba2e-4e9b-8ebe-3547e9a4dbd3",
                            Name = "Creator"
                        },
                        new
                        {
                            Id = "3ffb0003-45e4-4af3-a96b-66170449a20d",
                            ConcurrencyStamp = "3a157a4a-78c8-4dba-b8c8-71788fca6eb6",
                            Name = "Editor"
                        });
                });

            modelBuilder.Entity("FavoriteUser", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Favorite", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Address", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.Living", "Living")
                        .WithMany("Adverts")
                        .HasForeignKey("LivingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", "User")
                        .WithMany("Advert")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Living");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.District", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Favorite", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Advert", "Advert")
                        .WithMany("Favorites")
                        .HasForeignKey("AdvertId");

                    b.Navigation("Advert");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Image", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Advert", "Advert")
                        .WithMany("Image")
                        .HasForeignKey("AdvertId");

                    b.HasOne("Pet.Entities.Concrete.User", "ImageUser")
                        .WithMany("Image")
                        .HasForeignKey("ImageUserId");

                    b.HasOne("Pet.Entities.Concrete.Living", "Living")
                        .WithMany("Images")
                        .HasForeignKey("LivingId");

                    b.Navigation("Advert");

                    b.Navigation("ImageUser");

                    b.Navigation("Living");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Genus", "Genus")
                        .WithMany()
                        .HasForeignKey("GenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.Kind", "Kind")
                        .WithMany("Livings")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pet.Entities.Concrete.User", "User")
                        .WithMany("Livings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genus");

                    b.Navigation("Kind");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.HasOne("Pet.Entities.Concrete.Address", "Addresss")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addresss");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Advert", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Kind", b =>
                {
                    b.Navigation("Livings");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.Living", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Pet.Entities.Concrete.User", b =>
                {
                    b.Navigation("Advert");

                    b.Navigation("Image");

                    b.Navigation("Livings");
                });
#pragma warning restore 612, 618
        }
    }
}
